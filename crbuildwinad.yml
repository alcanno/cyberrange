--- 
- name: CyberRange
  hosts: localhost  
  
  tasks:
  - name: Create a new instance and attaches to a network and passes metadata to the instance
    os_server:
       state: present
       name: crvmwinad01
       image: "win2k19adimg"
       key_name: os_key
       timeout: 200
       flavor: 101
       auto_ip: no
       network: 57325c59-2d2e-47f7-9d19-3d33771e2fee
       security_groups: default
       auth:
         auth_url: "{{ lookup('env', 'OPENSTACK_AUTH_URL') }}"
         username: "{{ lookup('env', 'OPENSTACK_USERNAME') }}"
         password: "{{ lookup('env', 'OPENSTACK_PASSWORD') }}"
         project_name: "{{ lookup('env', 'OPENSTACK_PROJECT') }}"
         domain_name: "{{ lookup('env', 'OPENSTACK_DOMAIN') }}"
       meta:
         os: windows        
    async: 600
    poll: 5
    register: vm_ad01_created

  - name: Debug inventory - vm_ad01_created 
    debug:
      var: vm_ad01_created
      
  - name: Create floating ip - AD01
    os_floating_ip:
       state: present
       network: public 
       server: crvmwinad01 
       auth:
         auth_url: "{{ lookup('env', 'OPENSTACK_AUTH_URL') }}"
         username: "{{ lookup('env', 'OPENSTACK_USERNAME') }}"
         password: "{{ lookup('env', 'OPENSTACK_PASSWORD') }}"
         project_name: "{{ lookup('env', 'OPENSTACK_PROJECT') }}"
         domain_name: "{{ lookup('env', 'OPENSTACK_DOMAIN') }}"                 
    register: floating_ip_info
    
  - name: Add VM to inventory
    add_host:
      #name: "{{ vm_ad01_created.server.hostname }}"
      #ansible_host: "{{ vm_ad01_created.server.addresses.shared[0].addr }}"      
      name: "{{ vm_ad01_created.server.hostname }}"
      ansible_host: "{{ floating_ip_info.floating_ip.floating_ip_address }}"      
      groups: cr_ad_grp
    when: vm_ad01_created is defined and vm_ad01_created.changed    

  - name: Create VM DB01
    os_server:
       state: present
       name: crvmwindb01
       image: "win2k19img"
       key_name: os_key
       timeout: 200
       flavor: 101
       network: 57325c59-2d2e-47f7-9d19-3d33771e2fee
       security_groups: default
       auth:
         auth_url: "{{ lookup('env', 'OPENSTACK_AUTH_URL') }}"
         username: "{{ lookup('env', 'OPENSTACK_USERNAME') }}"
         password: "{{ lookup('env', 'OPENSTACK_PASSWORD') }}"
         project_name: "{{ lookup('env', 'OPENSTACK_PROJECT') }}"
         domain_name: "{{ lookup('env', 'OPENSTACK_DOMAIN') }}"
       meta:
         os: windows
    async: 600
    poll: 5
    register: vm_db01_created 

  - name: Debug inventory - vm_db01_created 
    debug:
      var: vm_db01_created

  - name: Create floating ip - DB01
    os_floating_ip:
       state: present
       network: public
       server: crvmwindb01 
       auth:
         auth_url: "{{ lookup('env', 'OPENSTACK_AUTH_URL') }}"
         username: "{{ lookup('env', 'OPENSTACK_USERNAME') }}"
         password: "{{ lookup('env', 'OPENSTACK_PASSWORD') }}"
         project_name: "{{ lookup('env', 'OPENSTACK_PROJECT') }}"
         domain_name: "{{ lookup('env', 'OPENSTACK_DOMAIN') }}"                 
    register: floating_ip_info

#  - name: Set fact for floating IPs
#    set_fact:
#       floating_ips: "{{ floating_ip_info.floating_ip.floating_ip_address }}"

#  - name: Output floating ip
#    debug:
#       var: floating_ips
             
  - name: Add VM to inventory
    add_host:
      name: "{{ vm_db01_created.server.hostname }}"
      ansible_host: "{{ floating_ip_info.floating_ip.floating_ip_address }}"      
      groups: cr_server_db_grp
    when: vm_db01_created is defined and vm_db01_created.changed

  - name: Create VM APP01
    os_server:
       state: present
       name: crvmwinap01
       image: "win2k19img"
       key_name: os_key
       timeout: 200
       flavor: 101
       network: 57325c59-2d2e-47f7-9d19-3d33771e2fee
       security_groups: default
       auth:
         auth_url: "{{ lookup('env', 'OPENSTACK_AUTH_URL') }}"
         username: "{{ lookup('env', 'OPENSTACK_USERNAME') }}"
         password: "{{ lookup('env', 'OPENSTACK_PASSWORD') }}"
         project_name: "{{ lookup('env', 'OPENSTACK_PROJECT') }}"
         domain_name: "{{ lookup('env', 'OPENSTACK_DOMAIN') }}"
       meta:
         os: windows
    async: 600
    poll: 5
    register: vm_ap01_created 

  - name: Debug inventory - vm_ap01_created 
    debug:
      var: vm_ap01_created

  - name: Create floating ip - AP01
    os_floating_ip:
       state: present
       network: public
       server: crvmwinap01 
       auth:
         auth_url: "{{ lookup('env', 'OPENSTACK_AUTH_URL') }}"
         username: "{{ lookup('env', 'OPENSTACK_USERNAME') }}"
         password: "{{ lookup('env', 'OPENSTACK_PASSWORD') }}"
         project_name: "{{ lookup('env', 'OPENSTACK_PROJECT') }}"
         domain_name: "{{ lookup('env', 'OPENSTACK_DOMAIN') }}"                 
    register: floating_ip_info

#  - name: Set fact for floating IPs
#    set_fact:
#       floating_ips: "{{ floating_ip_info.floating_ip.floating_ip_address }}"

#  - name: Output floating ip
#    debug:
#       var: floating_ips
             
  - name: Add VM to inventory
    add_host:
      name: "{{ vm_ap01_created.server.hostname }}"
      ansible_host: "{{ floating_ip_info.floating_ip.floating_ip_address }}"      
      groups: cr_server_ap_grp
    when: vm_ap01_created is defined and vm_ap01_created.changed
    
  - name: Debug inventory
    debug:
      var: hostvars

  - name: Create VM Linux App 
    os_server:
       state: present
       name: crvmlin02
       image: "ubuntu2204img"
       key_name: os_key
       timeout: 200
       flavor: 3
       auto_ip: no
       network: 57325c59-2d2e-47f7-9d19-3d33771e2fee
       security_groups: default
       auth:
         auth_url: "{{ lookup('env', 'OPENSTACK_AUTH_URL') }}"
         username: "{{ lookup('env', 'OPENSTACK_USERNAME') }}"
         password: "{{ lookup('env', 'OPENSTACK_PASSWORD') }}"
         project_name: "{{ lookup('env', 'OPENSTACK_PROJECT') }}"
         domain_name: "{{ lookup('env', 'OPENSTACK_DOMAIN') }}"    
       meta:
         os: linux        
    async: 600
    poll: 5
    register: vm_lnx_created

  - name: Debug vm_lnx_created variable
    debug:
       var: vm_lnx_created

  - name: Create floating ip - Linx
    os_floating_ip:
       state: present
       network: public
       server: crvmlin02 
       auth:
         auth_url: "{{ lookup('env', 'OPENSTACK_AUTH_URL') }}"
         username: "{{ lookup('env', 'OPENSTACK_USERNAME') }}"
         password: "{{ lookup('env', 'OPENSTACK_PASSWORD') }}"
         project_name: "{{ lookup('env', 'OPENSTACK_PROJECT') }}"
         domain_name: "{{ lookup('env', 'OPENSTACK_DOMAIN') }}"                 
    register: floating_ip_info

  - name: Set fact for floating IPs
    set_fact:
       floating_ips: "{{ floating_ip_info.floating_ip.floating_ip_address }}"

  - name: Output floating ip
    debug:
       var: floating_ips
       
  - name: Add VM to inventory
    add_host:
      name: "{{ vm_lnx_created.server.id }}"
      ansible_host: "{{ floating_ip_info.floating_ip.floating_ip_address }}"
      groups: cr_server_lnx_grp
    when: vm_lnx_created is defined and vm_lnx_created.changed

  - name: Debug inventory
    debug:
      var: hostvars

- name: CyberRange - AD01 - Play 1
  hosts: cr_ad_grp
  gather_facts: no
  collections:
    - openstack.cloud
  vars:
    ansible_user: "{{ lookup('env', 'VM_NODE_USER_02') }}"
    ansible_password: "{{ lookup('env', 'VM_NODE_PASSWORD') }}"
    ansible_connection: winrm
    ansible_shell_type: powershell
    ansible_ssh_port: 5986
    ansible_winrm_transport: ntlm     
    ansible_winrm_server_cert_validation: ignore
        
  tasks:
  - name: link NTP server to NZ
    win_command: 
      cmd: w32tm /config /manualpeerlist:"nz.pool.ntp.org,0x8" /syncfromflags:manual /reliable:YES /update
    register: result
    ignore_errors: yes
    async: 600
    poll: 5

  - name: Sync Timezon to NTP
    win_command: 
      cmd: w32tm /resync
    register: result
    ignore_errors: yes
    async: 600
    poll: 5
          
  - name: Run command MDE Agent
    win_command: 
      cmd: dir #C:\Users\Administrator\Documents\mdewin2019.cmd
    register: result
    ignore_errors: yes
    async: 600
    poll: 5
  
  - name: Display output
    debug:
      var: result.stdout_lines 
 
  - name: Run command TMV1 Agent
    win_command: 
      cmd: dir #C:\Users\Administrator\Documents\tmv1win2019.exe
    register: result
    ignore_errors: yes
    async: 600
    poll: 5
    
  - name: Display output
    debug:
      var: result.stdout_lines 
                  
- name: CyberRange - DB01 - Play 2
  hosts: cr_server_db_grp
  gather_facts: no
  collections:
    - openstack.cloud
  vars:
    ansible_user: "{{ lookup('env', 'VM_NODE_USER_02') }}"
    ansible_password: "{{ lookup('env', 'VM_NODE_PASSWORD') }}"
    ansible_connection: winrm
    ansible_shell_type: powershell 
    ansible_ssh_port: 5986
    ansible_winrm_transport: ntlm         
    ansible_winrm_server_cert_validation: ignore
        
  tasks:         
  - name: Rename host    
    win_hostname: 
      name: crvmwindb01
    register: server_rename

  - name: Debug inventory - DNS IP Address
    debug:
      var: hostvars['crvmwinad01']['ansible_host']

  - name: Reboot    
    win_reboot:
    when: server_rename.reboot_required
    
  - name: Set a single address on the adapter named Ethernet
    win_dns_client:
      adapter_names: '*'
      dns_servers: "8.8.8.8"
    register: dns_ip_add1

  - name: link NTP server to NZ
    win_command: 
      cmd: w32tm /config /manualpeerlist:"nz.pool.ntp.org,0x8" /syncfromflags:manual /reliable:YES /update
    register: result
    ignore_errors: yes
    async: 600
    poll: 5

  - name: Sync Timezon to NTP
    win_command: 
      cmd: w32tm /resync
    register: result
    ignore_errors: yes
    async: 600
    poll: 5

  - name: Ensure user is present
    ansible.windows.win_user:
      name: "{{ lookup('env', 'WIN_USER_01') }}"
      password: "{{ lookup('env', 'WIN_USER_01_PASSWORD') }}"
      state: present
      groups:
        - Users
        
  - name: Grant user remote desktop access
    win_command: 
      cmd: 'net localgroup "Remote Desktop Users" {{ lookup("env", "WIN_USER_01") }} /ADD'
    register: result
    ignore_errors: yes
    async: 600
    poll: 5        

  - name: Add CMDKEY
    win_command: 
      cmd: 'cmdkey /generic:"crvmwinap01" /user:"{{ lookup("env", "WIN_USER_02") }}" /pass:"{{ lookup("env", "WIN_USER_02_PASSWORD") }}"'
    register: result
    ignore_errors: yes
    async: 600
    poll: 5   
        
  - name: Run command MDE Agent
    win_command: 
      cmd: dir #C:\Users\Administrator\Documents\mdewin2019.cmd
    register: result
    ignore_errors: yes
    async: 600
    poll: 5
  
  - name: Display output
    debug:
      var: result.stdout_lines 
 
  - name: Run command TMV1 Agent
    win_command: 
      cmd: dir #C:\Users\Administrator\Documents\tmv1win2019.exe
    register: result
    ignore_errors: yes
    async: 600
    poll: 5
  
  - name: Display output
    debug:
      var: result.stdout_lines 
      
  - name: Set a single address on the adapter named Ethernet
    win_dns_client:
      adapter_names: '*'
      dns_servers: "{{ hostvars['crvmwinad01']['ansible_host'] }}"
    register: dns_ip_add1
                         
  - name: Join DB01 to the domain
    win_domain_membership:
      dns_domain_name: "{{ lookup('env', 'VM_NODE_DOMAIN') }}"
      domain_admin_user: "{{ lookup('env', 'VM_NODE_USER_01') }}"
      domain_admin_password: "{{ lookup('env', 'VM_NODE_PASSWORD') }}"
      hostname: crvmwindb01
      state: domain
    register: domain_join_db01
    throttle: 1
  
  - name: Reboot    
    win_reboot:
    when: domain_join_db01.reboot_required

  - name: Add Alternate DNS 8.8.8.8
    win_dns_client:
      adapter_names: '*'
      dns_servers: 
      - "{{ hostvars['crvmwinad01']['ansible_host'] }}"
      - "8.8.8.8"
    register: dns_ip_add1

  - name: Debug inventory - DNS IP Address
    debug:
      var: dns_ip_add1
                           
- name: CyberRange - AP01 - Play 3
  hosts: cr_server_ap_grp
  gather_facts: no
  collections:
    - openstack.cloud
  vars:
    ansible_user: "{{ lookup('env', 'VM_NODE_USER_02') }}"
    ansible_password: "{{ lookup('env', 'VM_NODE_PASSWORD') }}"
    ansible_connection: winrm
    ansible_shell_type: powershell
    ansible_ssh_port: 5986
    ansible_winrm_transport: ntlm     
    ansible_winrm_server_cert_validation: ignore
        
  tasks:         
  - name: Rename host    
    win_hostname: 
      name: crvmwinap01
    register: server_rename

  - name: Debug inventory - DNS IP Address
    debug:
      var: hostvars['crvmwinad01']['ansible_host']
                                
  - name: Reboot    
    win_reboot:
    when: server_rename.reboot_required

  - name: Set a single address on the adapter named Ethernet
    win_dns_client:
      adapter_names: '*'
      dns_servers: "8.8.8.8"
    register: dns_ip_add2

  - name: link NTP server to NZ
    win_command: 
      cmd: w32tm /config /manualpeerlist:"nz.pool.ntp.org,0x8" /syncfromflags:manual /reliable:YES /update
    register: result
    ignore_errors: yes
    async: 600
    poll: 5

  - name: Sync Timezon to NTP
    win_command: 
      cmd: w32tm /resync
    register: result
    ignore_errors: yes
    async: 600
    poll: 5

  - name: Ensure user is present
    ansible.windows.win_user:
      name: "{{ lookup('env', 'WIN_USER_02') }}"
      password: "{{ lookup('env', 'WIN_USER_02_PASSWORD') }}"
      state: present
      groups:
        - Users
        
  - name: Grant user remote desktop access
    win_command: 
      cmd: 'net localgroup "Remote Desktop Users" {{ lookup("env", "WIN_USER_02") }} /ADD'
    register: result
    ignore_errors: yes
    async: 600
    poll: 5 
        
  - name: Run command MDE Agent
    win_command: 
      cmd: dir #C:\Users\Administrator\Documents\mdewin2019.cmd
    register: result
    ignore_errors: yes
    async: 600
    poll: 5
  
  - name: Display output
    debug:
      var: result.stdout_lines 
     
  - name: Run command TMV1 Agent
    win_command: 
      cmd: dir #C:\Users\Administrator\Documents\tmv1win2019.exe
    register: result
    ignore_errors: yes
    async: 600
    poll: 5
  
  - name: Display output
    debug:
      var: result.stdout_lines 
 
  - name: Set a single address on the adapter named Ethernet
    win_dns_client:
      adapter_names: '*'
      dns_servers: "{{ hostvars['crvmwinad01']['ansible_host'] }}"
    register: dns_ip_add2

  - name: Debug inventory - DNS IP Address
    debug:
      var: dns_ip_add2
      
  - name: Join AP01 to the domain
    win_domain_membership:
      dns_domain_name: "{{ lookup('env', 'VM_NODE_DOMAIN') }}"
      domain_admin_user: "{{ lookup('env', 'VM_NODE_USER_01') }}"
      domain_admin_password: "{{ lookup('env', 'VM_NODE_PASSWORD') }}"
      hostname: crvmwinap01
      state: domain
    register: domain_join_ap01
    throttle: 1
  
  - name: Reboot    
    win_reboot:
    when: domain_join_ap01.reboot_required    

  - name: Add Alternate DNS 8.8.8.8
    win_dns_client:
      adapter_names: '*'
      dns_servers: 
      - "{{ hostvars['crvmwinad01']['ansible_host'] }}"
      - "8.8.8.8"
    register: dns_ip_add2

  - name: Debug inventory - DNS IP Address
    debug:
      var: dns_ip_add2
        
- name: CyberRange - Linux - Play 4
  hosts: cr_server_lnx_grp
  vars:
    ansible_user: root

  tasks:
  - name: Debug inventory - server 
    debug:
      var: cr_server_lnx_grp
      
  - name: Run command on OpenStack VM
    shell: "echo $(date) | md5sum | awk '{print substr($1,length($1)-31)}' > /home/ubuntu/flag.txt"
 
  - name: Run command on OpenStack VM
    shell: "echo $(date) | md5sum | awk '{print substr($1,length($1)-31)}' > /root/root.txt"
    
  - name: Run command on OpenStack VM
    shell: "mkdir /tmp/uploads && chown ubuntu:ubuntu /tmp/uploads"
     
  - name: Run command on OpenStack VM
    shell: "echo {{ lookup('env', 'WIN_USER_01_TOKEN') }} > /root/user_token.txt"
         
         
 
